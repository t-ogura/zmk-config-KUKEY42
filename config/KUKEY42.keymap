#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tapdance_kana: tapdance_kana {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_KANA";
            #binding-cells = <0>;
            bindings = <&kp INT2>, <&kp LANGUAGE_2>, <&sl 1>;

            tapping-term-ms = <400>;
        };

        WheelScroll: WheelScroll {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "WHEELSCROLL";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R          &kp T                                              &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F          &kp G        &mkp MCLK              &kp UP         &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V          &kp B        &kp DOUBLE_QUOTES      &kp DOWN       &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &kp LG(LS(S))  &lt 1 SPACE  &lt 3 GRAVE            &kp BACKSPACE  &lt 2 ENTER                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&WheelScroll SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2           &kp F3  &kp F4  &kp F5                      &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &kp EXCLAMATION  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp QUESTION     &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans           &trans  &trans  &trans  &trans      &trans  &trans                          &mt RIGHT_SHIFT F12
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        NUM {
            bindings = <
&kp TAB               &kp N7        &kp N8        &kp N9        &kp MINUS                                        &kp RIGHT_BRACKET  &trans    &mkp MB3  &trans     &trans
&kp ASTERISK          &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS   &trans                    &trans      &kp RPAR           &mkp MB1  &kp UP    &mkp MB2   &kp COLON
&mt LEFT_SHIFT SLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &kp LC(SINGLE_QUOTE)      &kp DELETE  &kp RIGHT_BRACE    &kp LEFT  &kp DOWN  &kp RIGHT  &kp SLASH
&kp ESCAPE            &kp N0        &kp PERIOD    &trans        &trans     &trans                    &trans      &trans                                            &trans
            >;
        };

        ARROW {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                      &kp LG(LC(LEFT_ARROW))  &kp LG(KP_PLUS)  &mkp MB3        &trans           &kp LG(LC(RIGHT))
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &mkp MB4                &mkp MB1         &kp UP_ARROW    &mkp MB2         &mkp MB5
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans                  &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans        &trans        &trans        &trans        &trans        &trans      &trans  &trans                                                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(KP_MINUS) LC(KP_PLUS)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &to 0   &trans  &mkp MB1  &mo 5   &mkp MB2  &mkp MB3
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &bootloader
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BT {
            bindings = <
&trans       &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans       &trans        &trans        &trans        &trans  &trans      &sys_reset   &trans        &trans        &trans        &trans        &trans
&trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&bootloader  &sys_reset    &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
